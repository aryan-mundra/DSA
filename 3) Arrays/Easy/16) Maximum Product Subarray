

//Brute force

class Solution {
    public int maxProduct(int[] arr) {
        int n = arr.length;
        int ans = Integer.MIN_VALUE;

        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int product = 1;
                for(int k=i;k<=j;k++){
                    product = product * arr[k];
                }
                if(product > ans){
                    ans = product;
                }
            }
        }

        return ans;
        
    }
}


//Better approach

class Solution {
    public int maxProduct(int[] arr) {
        int n = arr.length;
        int ans = Integer.MIN_VALUE;

        for(int i=0;i<n;i++){
            int product = 1;
            for(int j=i;j<n;j++){
                product = product * arr[j];
                ans = Math.max(ans,product);
            }
        }

        return ans;
        
    }
}




//Optimal solution
class Solution {
    public int maxProduct(int[] arr) {
        int n = arr.length;
        int prefix = 1;
        int suffix = 1;
        int ans = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){

            if(prefix ==0){
                prefix = 1;
            }
            if(suffix ==0){
                suffix = 1;
            }

            prefix = prefix* arr[i];
            suffix = suffix * arr[n-1-i]; // starting from the back of the array

            ans = Math.max(ans, Math.max(prefix,suffix));
        }

        return ans;
        
    }
}