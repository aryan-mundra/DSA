// Brute force

class Solution {
    public int maxSubArray(int[] arr) {
        
        int ans = Integer.MIN_VALUE;
        int n = arr.length;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int sum = 0;
                for(int k=i;k<=j;k++){
                    sum += arr[k];
                    ans = Math.max(sum, ans);
                }
            }
        }

        return ans;
        
    }
}






//Optimal solution

class Solution {
    public int maxSubArray(int[] arr) {
        
        int ans = Integer.MIN_VALUE;
        int n = arr.length;
        for(int i=0;i<n;i++){
            int sum = 0;
            for(int j=i;j<n;j++){
                sum += arr[j];
                ans = Math.max(sum, ans);
            }
        }

        return ans;
        
    }
}









// Kadanes algorithm

class Solution {
    public int maxSubArray(int[] arr) {
        int n = arr.length;
        int ans = Integer.MIN_VALUE;
        int sum = 0;
        for(int i=0;i<n;i++){
            sum += arr[i];
            ans = Math.max(ans , sum);
            if(sum <0){
                sum = 0;
            } 
        }
        return ans;
    }
}