//Approach 1

import java.util.Stack;

class HelloWorld {
    public static void main(String[] args) {
        
        MyQueue q = new MyQueue();
        q.add(2);
        q.add(3);
        q.add(4);
        
        System.out.println("Top element: " + q.peek());
        System.out.println("Size of queue: " + q.size());
        
        q.remove();
        System.out.println("Top element: " + q.peek());
        System.out.println("Size of queue: " + q.size());
        
        q.remove();
        System.out.println("Top element: " + q.peek());
        System.out.println("Size of queue: " + q.size());
    }
}

class MyQueue {
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();
    
    void add(int element) {
        
        //Remember Logic for push (when implementing queue using stack)
        
        // Move all elements from s1 ---> s2
        // Push the new element onto s1
        // Move all elements back from s2 --> s1


        while (!s1.isEmpty()) {
            s2.push(s1.pop());
        }
    
        s1.push(element);
        
        while (!s2.isEmpty()) {
            s1.push(s2.pop());
        }
    }
    
    int peek() {
        return s1.peek();
    }
    
    void remove() {
        if (!s1.isEmpty()) {
            s1.pop();
        }
    }
    
    int size() {
        return s1.size();
    }
}

























//Approach 2

// In this approach we will make our remove and peek operation expensive and make our add operation cheaper
// This approach is simpler

import java.util.Stack;

class HelloWorld {
    public static void main(String[] args) {
        
        MyQueue q = new MyQueue();
        q.add(2);
        q.add(3);
        q.add(4);
        
        System.out.println("Top element: " + q.peek());
        System.out.println("Size of queue: " + q.size());
        
        q.remove();
        System.out.println("Top element: " + q.peek());
        System.out.println("Size of queue: " + q.size());
        
        q.remove();
        System.out.println("Top element: " + q.peek());
        System.out.println("Size of queue: " + q.size());
    }
}

class MyQueue {
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();
    
    void add(int element) {
    
        s1.push(element);
    }
    
    int peek() {
        while(!s1.isEmpty()){
            s2.push(s1.pop());
        }
        return s2.peek();
    }
    
    void remove() {
        //For remove
        // s1 --> s2
        // s2.pop
    
        while(!s1.isEmpty()){
            s2.push(s1.pop());
        }
        s2.pop();
    }
    
    int size() {
        return s2.size();
    }
}

