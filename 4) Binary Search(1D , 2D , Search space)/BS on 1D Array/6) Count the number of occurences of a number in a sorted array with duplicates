// Number of occurences

//Brute force

class Solution {
    int count(int[] arr, int n, int x) {
        
        // code here
        int count = 0;
        for(int i=0;i<n;i++){
            
            if(arr[i] == x){
                count++;
            }
        }
        return count;
    }
}









//Optimized approach


// To find out number of occurences using binary search you have to use the formula
//  = last - first + 1;

class Solution {
    int count(int[] arr, int n, int x) {
        // code here
        
        int first = firstOccurence(arr,n,x);
        int last = lastOccurence(arr,n,x);
        
        if(first == -1 && last == -1){. // if nothing found
            return 0;
        }
        
        int ans = last - first + 1;
        return ans;
    }
    
    private int firstOccurence(int[] arr, int n, int x){
        int low = 0;
        int high = n-1;
        int first = -1;
        while(low<=high){
            
            int mid = (low+high)/2;
            
            if(arr[mid]==x){
                first = mid;
                
                high = mid -1; //looking for smaller index on left
            }else if(arr[mid] < x){
                low = mid +1;
            }
            else{
                high = mid -1;
            }
            
        }
        return first;
    }
    
    private int lastOccurence(int[] arr, int n, int x){
        
        int low = 0;
        int high = n-1;
        
        int last = -1;
        while(low<=high){
            
            int mid = (low+high)/2;
            
            if(arr[mid]==x){
                last = mid;
                
                low = mid +1; //looking for smaller index on left
            }else if(arr[mid] < x){
                low = mid +1;
            }
            else{
                high = mid -1;
            }
        }
        
        return last;
    }
}